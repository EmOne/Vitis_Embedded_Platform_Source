  # Create PFM attributes
  set_property PFM_NAME "xilinx.com:xd:${PLATFORM_NAME}:${VER}" [get_files [current_bd_design].bd]
  set_property PFM.IRQ {intr {id 0 range 32}} [get_bd_cells /axi_intc_0]
 set_property PFM.CLOCK {clk_out1 {id "0" is_default "true" proc_sys_reset "proc_sys_reset_0" status "fixed"} clk_out2 {id "1" is_default "false" proc_sys_reset "proc_sys_reset_1" status "fixed"} clk_out3 {id "2" is_default "false" proc_sys_reset "/proc_sys_reset_2" status "fixed"} clk_out4 {id "3" is_default "false" proc_sys_reset "/proc_sys_reset_3" status "fixed"} clk_out5 {id "4" is_default "false" proc_sys_reset "/proc_sys_reset_4" status "fixed"} clk_out6 {id "5" is_default "false" proc_sys_reset "/proc_sys_reset_5" status "fixed"} clk_out7 {id "6" is_default "false" proc_sys_reset "/proc_sys_reset_6" status "fixed"}} [get_bd_cells /clk_wiz_0]

  set_property PFM.AXI_PORT {M_AXI_HPM1_FPD {memport "M_AXI_GP"} S_AXI_HPC0_FPD {memport "S_AXI_HPC" sptag "HPC0" memory "ps_e HPC0_DDR_LOW"}  S_AXI_HPC1_FPD {memport "S_AXI_HPC" sptag "HPC1" memory "ps_e HPC1_DDR_LOW"}  S_AXI_HP0_FPD {memport "S_AXI_HP" sptag "HP0" memory "ps_e HP0_DDR_LOW"}  S_AXI_HP1_FPD {memport "S_AXI_HP" sptag "HP1" memory "ps_e HP1_DDR_LOW"}  S_AXI_HP2_FPD {memport "S_AXI_HP" sptag "HP2" memory "ps_e HP2_DDR_LOW"}} [get_bd_cells /ps_e]

set parVal []
for {set i 1} {$i < 64} {incr i} {
  lappend parVal M[format %02d $i]_AXI {memport "M_AXI_GP"}
}
set_property PFM.AXI_PORT $parVal [get_bd_cells /interconnect_axilite]

set hp3Val []
for {set i 1} {$i < 16} {incr i} {
  lappend hp3Val S[format %02d $i]_AXI {memport "S_AXI_HP" sptag "HP3" memory "ps_e HP3_DDR_LOW"}
}
set_property PFM.AXI_PORT $hp3Val [get_bd_cells /interconnect_axifull]

set lpdVal []
for {set i 1} {$i < 16} {incr i} {
  lappend lpdVal S[format %02d $i]_AXI {memport "S_AXI_HP" sptag "LPD" memory "ps_e LPD_DDR_LOW"}
}
set_property PFM.AXI_PORT $lpdVal [get_bd_cells /axi_interconnect_lpd]

  save_bd_design
  validate_bd_design


generate_target  all  [get_files  ./xilinx_zcu102_base/xilinx_zcu102_base.srcs/sources_1/bd/xilinx_zcu102_base/xilinx_zcu102_base.bd]
make_wrapper -files [get_files ./xilinx_zcu102_base/xilinx_zcu102_base.srcs/sources_1/bd/xilinx_zcu102_base/xilinx_zcu102_base.bd] -top
add_files -norecurse ./xilinx_zcu102_base/xilinx_zcu102_base.srcs/sources_1/bd/xilinx_zcu102_base/hdl/xilinx_zcu102_base_wrapper.v

update_compile_order -fileset sources_1
update_compile_order -fileset sim_1


set_property platform.default_output_type "sd_card" [current_project]
set_property platform.design_intent.embedded "true" [current_project]
set_property platform.design_intent.server_managed "false" [current_project]
set_property platform.design_intent.external_host "false" [current_project]
set_property platform.design_intent.datacenter "false" [current_project]

file mkdir ./xilinx_zcu102_base/xilinx_zcu102_base.sdk
#file copy -force ./xilinx_zcu102_base/xilinx_zcu102_base.runs/impl_1/zcu102_wrapper.sysdef ./xilinx_zcu102_base/xilinx_zcu102_base.sdk/zcu102_wrapper.hdf
#
set pre_synth ""

if { $argc > 1} {
   set pre_synth [lindex $argv 2]
}
if {$pre_synth} {
set_property platform.platform_state "pre_synth" [current_project]

write_hw_platform -force $PLATFORM_NAME.xsa
validate_hw_platform $PLATFORM_NAME.xsa -verbose 
} else {
set_property generate_synth_checkpoint true [get_files -norecurse *.bd]
launch_runs impl_1 -to_step write_bitstream -jobs 16
wait_on_run impl_1

write_hw_platform -include_bit $PLATFORM_NAME.xsa
#write_hw_platform -force ./xilinx_zcu102_base.xsa
validate_hw_platform $PLATFORM_NAME.xsa
}
#generate README.hw
set board zcu102

set fd [open README.hw w] 

set board [lindex $argv 0]

puts $fd "##########################################################################"
puts $fd "This is a brief document containing design specific details for : ${board}"
puts $fd "This is auto-generated by Petalinux ref-design builder created @ [clock format [clock seconds] -format {%a %b %d %H:%M:%S %Z %Y}]"
puts $fd "##########################################################################"

set board_part [get_board_parts [current_board_part -quiet]]
if { $board_part != ""} {
    puts $fd "BOARD: $board_part" 
  }

set design_name [get_property NAME [get_bd_designs]]
puts $fd "BLOCK DESIGN: $design_name" 

set columns {%40s%30s%15s%50s}
puts $fd [string repeat - 150]
puts $fd [format $columns "MODULE INSTANCE NAME" "IP TYPE" "IP VERSION" "IP"]
puts $fd [string repeat - 150]
foreach ip [get_ips] {
  set catlg_ip [get_ipdefs -all [get_property IPDEF $ip]] 
     puts $fd [format $columns [get_property NAME $ip] [get_property NAME $catlg_ip] [get_property VERSION $catlg_ip] [get_property VLNV $catlg_ip]]
}
close $fd
